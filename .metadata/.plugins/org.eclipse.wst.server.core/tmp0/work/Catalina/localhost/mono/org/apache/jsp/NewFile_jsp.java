/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2016-09-13 07:30:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<input type=\"text\" id=\"postcode\" placeholder=\"우편번호\">\n");
      out.write("<input type=\"button\" onclick=\"daumPostcode()\" value=\"우편번호 찾기\"><br>\n");
      out.write("<input type=\"text\" id=\"address\" placeholder=\"주소\">\n");
      out.write("<input type=\"text\" id=\"address2\" placeholder=\"상세주소\">\n");
      out.write("\n");
      out.write("<!-- iOS에서는 position:fixed 버그가 있음, 적용하는 사이트에 맞게 position:absolute 등을 이용하여 top,left값 조정 필요 -->\n");
      out.write("<div id=\"layer\" style=\"display:none;position:fixed;overflow:hidden;z-index:1;-webkit-overflow-scrolling:touch;\">\n");
      out.write("<img src=\"//i1.daumcdn.net/localimg/localimages/07/postcode/320/close.png\" id=\"btnCloseLayer\" style=\"cursor:pointer;position:absolute;right:-3px;top:-3px;z-index:1\" onclick=\"closeDaumPostcode()\" alt=\"닫기 버튼\">\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\n");
      out.write("<script>\n");
      out.write("    // 우편번호 찾기 화면을 넣을 element\n");
      out.write("    var element_layer = document.getElementById('layer');\n");
      out.write("\n");
      out.write("    function closeDaumPostcode() {\n");
      out.write("        // iframe을 넣은 element를 안보이게 한다.\n");
      out.write("        element_layer.style.display = 'none';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function daumPostcode() {\n");
      out.write("        new daum.Postcode({\n");
      out.write("            oncomplete: function(data) {\n");
      out.write("                // 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\n");
      out.write("\n");
      out.write("                // 각 주소의 노출 규칙에 따라 주소를 조합한다.\n");
      out.write("                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\n");
      out.write("                var fullAddr = data.address; // 최종 주소 변수\n");
      out.write("                var extraAddr = ''; // 조합형 주소 변수\n");
      out.write("\n");
      out.write("                // 기본 주소가 도로명 타입일때 조합한다.\n");
      out.write("                if(data.addressType === 'R'){\n");
      out.write("                    //법정동명이 있을 경우 추가한다.\n");
      out.write("                    if(data.bname !== ''){\n");
      out.write("                        extraAddr += data.bname;\n");
      out.write("                    }\n");
      out.write("                    // 건물명이 있을 경우 추가한다.\n");
      out.write("                    if(data.buildingName !== ''){\n");
      out.write("                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\n");
      out.write("                    }\n");
      out.write("                    // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\n");
      out.write("                    fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\n");
      out.write("                document.getElementById('postcode').value = data.zonecode; //5자리 새우편번호 사용\n");
      out.write("                document.getElementById('address').value = fullAddr;\n");
      out.write("\n");
      out.write("                // iframe을 넣은 element를 안보이게 한다.\n");
      out.write("                // (autoClose:false 기능을 이용한다면, 아래 코드를 제거해야 화면에서 사라지지 않는다.)\n");
      out.write("                element_layer.style.display = 'none';\n");
      out.write("            },\n");
      out.write("            width : '100%',\n");
      out.write("            height : '100%'\n");
      out.write("        }).embed(element_layer);\n");
      out.write("\n");
      out.write("        // iframe을 넣은 element를 보이게 한다.\n");
      out.write("        element_layer.style.display = 'block';\n");
      out.write("\n");
      out.write("        // iframe을 넣은 element의 위치를 화면의 가운데로 이동시킨다.\n");
      out.write("        initLayerPosition();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 브라우저의 크기 변경에 따라 레이어를 가운데로 이동시키고자 하실때에는\n");
      out.write("    // resize이벤트나, orientationchange이벤트를 이용하여 값이 변경될때마다 아래 함수를 실행 시켜 주시거나,\n");
      out.write("    // 직접 element_layer의 top,left값을 수정해 주시면 됩니다.\n");
      out.write("    function initLayerPosition(){\n");
      out.write("        var width = 300; //우편번호서비스가 들어갈 element의 width\n");
      out.write("        var height = 460; //우편번호서비스가 들어갈 element의 height\n");
      out.write("        var borderWidth = 5; //샘플에서 사용하는 border의 두께\n");
      out.write("\n");
      out.write("        // 위에서 선언한 값들을 실제 element에 넣는다.\n");
      out.write("        element_layer.style.width = width + 'px';\n");
      out.write("        element_layer.style.height = height + 'px';\n");
      out.write("        element_layer.style.border = borderWidth + 'px solid';\n");
      out.write("        // 실행되는 순간의 화면 너비와 높이 값을 가져와서 중앙에 뜰 수 있도록 위치를 계산한다.\n");
      out.write("        element_layer.style.left = (((window.innerWidth || document.documentElement.clientWidth) - width)/2 - borderWidth) + 'px';\n");
      out.write("        element_layer.style.top = (((window.innerHeight || document.documentElement.clientHeight) - height)/2 - borderWidth) + 'px';\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
